/**
 * SXUI MODULES
 *
 * BASE JS | ajax上传
 * 包括：常用函数等
 *
 * Copyright (c) 2015-2016 生学教育 (http://www.sxw.cn)
 *
 */

var imagePATH = "/src/";

;(function($) {

	/* 公共插件定义 */
	$.sx = {

		/*
		 * jquery.offset.js
		 *
		 */

		//得到document文档树的宽度和高度
		documentWidth: function() {
			return $(document).width();
		},
		documentHeight: function() {
			return $(document).height();
		},
		//得到window窗口的宽度和高度
		windowWidth: function() {
			if (!$.support.leadingWhitespace) {
				return document.compatMode == "CSS1Compat" ? document.documentElement.clientWidth : document.body.clientWidth;
			} else {
				return self.innerWidth;
			}
		},
		windowHeight: function() {
			if (!$.support.leadingWhitespace) {
				return document.compatMode == "CSS1Compat" ? document.documentElement.clientHeight : document.body.clientHeight;
			} else {
				return self.innerHeight;
			}
		},
		/* 获取浏览器的滚动条宽度 */
		getScrollBarWidth: function() {
			var __scrollBarWidth = null;
			var scrollBarHelper = document.createElement("div");
			scrollBarHelper.style.cssText = "overflow:scroll; width:100px; height:100px;";
			document.body.appendChild(scrollBarHelper);
			if (scrollBarHelper) {
				// 垂直滚动条宽度
				__scrollBarWidth = scrollBarHelper.offsetWidth - scrollBarHelper.clientWidth;
				// 水平滚动条宽度
				// __scrollBarWidth = scrollBarHelper.offsetHeight - scrollBarHelper.clientHeight;
			}
			document.body.removeChild(scrollBarHelper);
			return __scrollBarWidth;
		},


		/*
		 * 常用工具类
		 *
		 */

		// 计算字符串的长度，(Unicode长度为2，非Unicode长度为1)
		strLength: function(str) {
			var intLength = 0
			for (var i = 0; i < str.length; i++) {
				if ((str.charCodeAt(i) < 0) || (str.charCodeAt(i) > 255))
					intLength = intLength + 2
				else
					intLength = intLength + 1
			}
			return intLength;
		},
		// 判断是否是整数
		isInteger: function(a) {
			return /^(-|\+)?\d+$/.test(a);
		},
		// 得到百分比，保留小数点后2位-四舍五入
		Percentage: function(number1, number2) {
			return (Math.round(number1 / number2 * 10000) / 100.00 + "%");
		},
		// 得到百分比，保留小数点后2位-向下取值
		Percentage2: function(number1, number2) {
			return (Math.floor(number1 / number2 * 10000) / 100.00 + "%");
		},

		// 获取当前window.location中的参数
		getLocationPara: function(paraName) {
			var reg = new RegExp("(^|&)" + paraName + "=([^&]*)(&|$)", "i");
			var r = window.location.search.substr(1).match(reg);
			if (r != null) return (r[2]);
			return null;
		},
		// 获取当前window.location中的锚点值
		getLocationHash: function() {
			return location.hash.split("#")[1];
			//return location.hash.split("#")[location.hash.split("#").length-1];
		},
		// 获取某个url中的参数
		getUrlPara: function(url, paraName) {
			var reg = new RegExp("(^|&)" + paraName + "=([^&]*)(&|$)", "i");
			var r = url.split("?")[1].match(reg);
			if (r != null) return (r[2]);
			return null;
		},
		// 获取某个url中的锚点值
		getUrlHash: function(url) {
			return url.split("#")[1];
			//return url.split("#")[url.split("#").length-1];
		},
		// 高效率去掉数组中重复项，使用hashtable方法
		unique: function(array) {
			var result = [],
				hash = {};
			for (var i = 0, elem;
				 (elem = array[i]) != null; i++) {
				if (!hash[elem]) {
					result.push(elem);
					hash[elem] = true;
				}
			}
			return result;
		},
		// 数组求交集
		intersection: function(array1, array2) {
			// ie7、8不支持
			return array1.filter(function(n) {
				return array2.indexOf(n) != -1;
			});
		},
		// 数组最大值
		maxArrayData: function(array) {
			return Math.max.apply(null, array);
		},
		// 数组最小值
		minArrayData: function(array) {
			return Math.min.apply(null, array);
		},
		/* 查找数组中的值的位置 */
		cruelSearch: function(array, key) {
			if (key) {
				re = new RegExp(key, ["i"])
				return (array.toString().replace(re, "┢").replace(/[^,┢]/g, "")).indexOf("┢");
			} else {
				return -1;
			}
		},
		deleteByValue: function(arr, valueToDelete) {
			var ret = $.grep(arr, function(value, i) {
				return value != valueToDelete;
			});
			return ret;
		},


		// 转义html标签
		htmlEncode: function(text) {
			return text.replace(/&/g, '&').replace(/\"/g, '"').replace(/</g, '<').replace(/>/g, '>');
		},
		// 加入收藏夹
		addFavorite: function(url, title) {
			try {
				window.external.addFavorite(url, title)
			} catch (e) {
				try {
					window.sidebar.addPanel(title, url, "")
				} catch (e) {
					alert("加入收藏失败，请使用Ctrl+D进行添加")
				}
			}
		},
		// 设为首页
		setHomepage: function() {
			if (document.all) {
				document.body.style.behavior = 'url(#default#homepage)';
				document.body.setHomePage('http://w3cboy.com')
			} else if (window.sidebar) {
				if (window.netscape) {
					try {
						netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect")
					} catch (e) {
						alert("该操作被浏览器拒绝，如果想启用该功能，请在地址栏内输入 about:config,然后将项 signed.applets.codebase_principal_support 值该为true")
					}
				}
				var prefs = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefBranch);
				prefs.setCharPref('browser.startup.homepage', 'http://w3cboy.com')
			}
		},



		/*
		 * 事件触发型函数
		 *
		 */

		// 得到触发当前事件时鼠标的位置
		mouseLeft: function(event) {
			if (event.pageX) {
				return event.pageX - $(document).scrollLeft();
			} else {
				return (event.clientX + document.body.scrollLeft - document.body.clientLeft) - $(document).scrollLeft();
			}
		},
		mouseTop: function(event) {
			if (event.pageY) {
				return event.pageY - $(document).scrollTop();
			} else {
				return (event.clientY + document.body.scrollTop - document.body.scrollTop) - $(document).scrollTop();
			}
		},
		// 检查触发事件是否在某个id上
		clickBodyUnlessById: function(event, id) {
			return id === event.target.id || $(event.target).parents(['#', id].join('')).length ? !1 : !0;
		},





		/*
		 * 判断访问终端
		 *
		 */
		// 使用方法 if($.sx.browser.versions.webKit==true && $.sx.browser.versions.weixin==true)
		// 使用方法 if($.sx.browser.versions.trident==true && $.sx.browser.versions.version==8.0)
		browser: {
			versions: function() {
				var u = navigator.userAgent,
					app = navigator.appVersion;
				return {
					version: (u.toLowerCase().match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1], //浏览器版本
					trident: u.indexOf('Trident') > -1, //IE内核
					presto: u.indexOf('Presto') > -1, //opera内核
					webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核
					gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核
					mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端
					ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端
					android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器
					iPhone: u.indexOf('iPhone') > -1, //是否为iPhone或者QQHD浏览器
					iPad: u.indexOf('iPad') > -1, //是否iPad
					webApp: u.indexOf('Safari') == -1, //是否web应该程序，没有头部与底部
					weixin: u.indexOf('MicroMessenger') > -1, //是否微信 （2015-01-22新增）
					qq: u.match(/\sQQ/i) == " qq" //是否QQ
				};
			}(),
			language: (navigator.browserLanguage || navigator.language).toLowerCase()
		},



		// /*
		//  * dialog-弹出窗
		//  *
		//  */
		// dialog: function(options) {

		//     var defaults = {
		//         opentype: "html", // iframe, ajax, html, alert  默认为html
		//         opentitle: "", // false时不显示
		//         openAnimate: "", // slide, fade  进入动画，默认无
		//         layerclass: "", // class
		//         bgcolor: "", // false表示不要背景颜色，否则就是class名
		//         isbgshow: true, // 是否显示背景框
		//         isbgclosed: false, // 点击背景会关闭弹出层 默认不关闭
		//         isabsolute: false, // 默认false为fixed,true为absolute(流式窗口)
		//         isShowClose: true, // 是否显示关闭按钮
		//         isHideScrollBar: true, // 是否隐藏滚动条，让滚动条不能滚
		//         iframeWidth: 800, // 如果是iframe的话
		//         iframeHeight: 450, // 如果是iframe的话
		//         iframeSrc: "", // 如果是iframe的话
		//         ajaxWidth: "", // ajaxWidth
		//         ajaxHeight: "", // ajaxHeight
		//         html: ""
		//     };
		//     this.options = $.extend(defaults, options);


		//     // 先删掉可能存在的弹出窗html
		//     $.sx.dialogClosed(this.options.opentype);


		//     // 加type的class
		//     this.options.layerclass += " dialog" + this.options.opentype + "-box";
		//     // 加fixed的class
		//     if (this.options.isabsolute === true) this.options.layerclass += " dialog-box-absolute";

		//     // make html
		//     var dialogHtml = "";

		//     var showClose = "";
		//     if (this.options.isShowClose === true) {
		//         showClose = '<a href="javascript:void(0)" class="dialog-closed" onClick="$.sx.dialogClosed(' + (this.options.opentype == "alert" ? 1 : "") + ')" title="关闭"><i class="iconfont"></i></a>';
		//     }

		//     var showOpentitle = "";
		//     if (this.options.opentitle !== false) {
		//         showOpentitle = '<div class="dialog-title">' + this.options.opentitle + '</div>';
		//     }

		//     if (this.options.bgcolor === false) {
		//         this.options.bgcolor = "dialog-bg-no";
		//     }

		//     if (this.options.isbgclosed === true) {
		//         this.options.isbgclosed = ' onClick="$.sx.dialogClosed(' + (this.options.opentype == "alert" ? 1 : "") + ')"';
		//     } else {
		//         this.options.isbgclosed = '';
		//     }

		//     if (this.options.opentype == "iframe") {
		//         dialogHtml = '<iframe id="js_dialogframe" name="dialogframe" class="dialogframe" frameborder="0" width="' + this.options.iframeWidth + '" height="' + this.options.iframeHeight + '" src="' + this.options.iframeSrc + '"></iframe>';
		//     } else if (this.options.opentype == "ajax") {
		//         dialogHtml = '<div id="js_dialogajax" class="dialogajax" style="width: ' + this.options.ajaxWidth + 'px; height: ' + this.options.ajaxHeight + 'px;"><img src="' + imagePATH + '/dist/img/loading2.gif" class="dialogajax-img"></div>';
		//     } else {
		//         if (this.options.html != "") {
		//             dialogHtml = this.options.html;
		//         }
		//     }

		//     dialogHtml = '<div class="dialog-box ' + this.options.layerclass + '" id="js_dialog' + (this.options.opentype == "alert" ? "alert" : "") + '-box">' + showClose + showOpentitle + '<div class="dialog-content" id="js_dialog' + this.options.opentype + '-content">' + dialogHtml + '</div></div>';


		//     if (this.options.isbgshow === true) {

		//         dialogHtml += '<div class="dialog-bg dialog' + this.options.opentype + '-bg ' + this.options.bgcolor + '" id="js_dialog' + (this.options.opentype == "alert" ? "alert" : "") + '-bg"' + this.options.isbgclosed + '></div>';
		//     }



		//     // 打开弹出层
		//     $(dialogHtml).appendTo("body");

		//     if (this.options.isHideScrollBar == false) {
		//         //alerts_min 不隐藏滚动条
		//     } else if ($.sx.documentHeight() > $.sx.windowHeight() && !$("body").hasClass('nocroll')) { //有滚动条
		//         $("html").css("overflow", "hidden");
		//         $(document.body).css("border-right", $.sx.getScrollBarWidth() + 'px solid transparent');
		//     }

		//     // $('#js_dialog' + this.options.opentype + '-bg, #js_dialog' + this.options.opentype + '-box').show();
		//     // 居中
		//     //$.sx.dialogCenter($('#js_dialog' + this.options.opentype + '-box'));

		//     var obj1 = $('#js_dialog' + (this.options.opentype == "alert" ? "alert" : "") + '-bg');
		//     var obj2 = $('#js_dialog' + (this.options.opentype == "alert" ? "alert" : "") + '-box');
		//     if (this.options.openAnimate == "slide") {
		//         obj1.fadeIn(200, function() {
		//             obj2.show().css({
		//                 opacity: 0,
		//                 top: $.sx.windowHeight(),
		//                 left: ($.sx.windowWidth() - obj2.innerWidth()) / 2
		//             }).addClass('alert-animate-slide');
		//             obj2.animate({
		//                 opacity: 1,
		//                 top: ($.sx.windowHeight() - obj2.innerHeight()) / 2
		//             }, 350);
		//         });
		//     } else if (this.options.openAnimate == "fade") {
		//         $.sx.dialogCenter(obj2);
		//         obj1.fadeIn(200);
		//         obj2.fadeIn(600);
		//     } else {
		//         obj1.show();
		//         obj2.show();
		//         $.sx.dialogCenter(obj2);
		//     }

		// },

		// /* 居中 */
		// dialogCenter: function(obj) {
		//     if (obj == undefined) obj = $("#js_dialoghtml-box");
		//     var left = ($.sx.windowWidth() - obj.innerWidth()) / 2;
		//     var top = ($.sx.windowHeight() - obj.innerHeight()) / 2;
		//     if (top < 20) top = 20;
		//     obj.css({
		//         left: left,
		//         top: top
		//     });
		//     return false;
		// },

		// /* 关闭 */
		// dialogClosed: function(type) {
		//     if ($.sx.documentHeight() > $.sx.windowHeight() && !$("body").hasClass('nocroll')) {
		//         $("html").css("overflow", "auto");
		//         $(document.body).css("border-right", '0');
		//     }

		//     if (type == 1 || type == "alert") {
		//         if ($("#js_dialogalert-box").hasClass('alert-animate-slide')) {
		//             $("#js_dialogalert-box").animate({
		//                 opacity: 0,
		//                 top: $.sx.windowHeight()
		//             }, 350, function() {
		//                 $("#js_dialogalert-bg").fadeOut(function() {
		//                     $("#js_dialogalert-bg, #js_dialogalert-box").remove();
		//                 });
		//             });
		//         } else {
		//             $("#js_dialogalert-bg, #js_dialogalert-box").remove();
		//         }
		//     } else {
		//         $("#js_dialog-bg, #js_dialog-box").remove();
		//         $("#js_dialogalert-bg, #js_dialogalert-box").remove();
		//     }

		//     clearTimeout($.sx.dialogTIMELOCK);
		//     return false;
		// },

		// /* dialogAjax */
		// dialogAjax: function(obj) {
		//     if (typeof(obj) == "string") obj = { url: obj };
		//     obj = $.extend({
		//         opentitle: "新建窗口",
		//         ajaxWidth: "900",
		//         ajaxHeight: "480",
		//         url: "",
		//         type: "post",
		//         data: "",
		//         dataType: 'json',
		//         success: function() {
		//             // do something
		//         }
		//     }, obj);
		//     console.info(obj);
		//     $.sx.dialog({
		//         opentype: "ajax",
		//         opentitle: obj.opentitle,
		//         layerclass: obj.layerclass,
		//         ajaxWidth: obj.ajaxWidth,
		//         ajaxHeight: obj.ajaxHeight,
		//         html: ""
		//     });
		//     if ($.sx.dialogAJAXLOCK != null) $.sx.dialogAJAXLOCK.abort();
		//     $.sx.dialogAJAXLOCK = $.ajax({
		//         url: obj.url,
		//         type: obj.type,
		//         data: obj.data,
		//         dataType: obj.dataType,
		//         success: function(data) {
		//             console.info("success");
		//             console.info(data);
		//             if ($.sx.dialogAJAXLOCK != null) {
		//                 setTimeout(function() {
		//                     $("#js_dialogajax").html(data.html);
		//                 }, 2000)
		//             }
		//         },
		//         complete: function(o) {
		//             $.sx.dialogAJAXLOCK = null;
		//             console.info("complete");
		//         },
		//         error: function(o) {
		//             console.info("error");
		//             console.info(o);
		//         }
		//     });
		// },

		// /* dialogform */
		// dialogform: function(obj, fun) {

		//     var html = '';
		//     var html_bottom = '';
		//     var submitid = '';

		//     $.each(obj, function(k, v) {
		//         //console.info(k);
		//         if (v.span != -1) {
		//             v.span = '<span class="span">' + v.span + '</span>';
		//         } else {
		//             v.span = "";
		//         }
		//         if (v.type == "form") {
		//             html += '<form class="dialog-form ' + (v.classname != undefined ? v.classname : "") + '" name="' + (v.name != undefined ? v.name : "") + '" id="' + (v.name != undefined ? "js_" + v.name : "") + '" method="' + (v.method != undefined ? v.method : "") + '" action="' + (v.action != undefined ? v.action : "") + '">';
		//             html_bottom = '</form>';
		//         } else if (v.type == "text") {
		//             html += '<p>' + v.span + '<input class="input ' + (v.classname != undefined ? v.classname : "") + '" type="text" name="' + (v.name != undefined ? v.name : "") + '" id="' + (v.name != undefined ? "js_" + v.name : "") + '" value="' + (v.value != undefined ? v.value : "") + '"></p>';
		//         } else if (v.type == "textarea") {
		//             html += '<p>' + v.span + '<textarea class="textarea ' + (v.classname != undefined ? v.classname : "") + '" name="' + (v.name != undefined ? v.name : "") + '" id="' + (v.name != undefined ? "js_" + v.name : "") + '">' + (v.value != undefined ? v.value : "") + '</textarea></p>';
		//         } else if (v.type == "select") {
		//             html += '<p>' + v.span + '<select class="select" name="' + (v.name != undefined ? v.name : "") + '" id="' + (v.name != undefined ? "js_" + v.name : "") + '">' + (v.value != undefined ? v.value : "") + '</select></p>';
		//         } else if (v.type == "checkbox") {
		//             html += '<p>' + v.span + '' + (v.value != undefined ? v.value : "") + '</p>';
		//         } else if (v.type == "onlytxt") {
		//             html += '<p>' + v.span + '' + (v.value != undefined ? v.value : "") + '</p>';
		//         } else if (v.type == "file") {
		//             html += '<p>' + v.span + '<input type="file" class="file" name="' + (v.name != undefined ? v.name : "") + '" id="' + (v.name != undefined ? "js_" + v.name : "") + '">';
		//         } else if (v.type == "file_ajaxload") {
		//             html += '<p>' + v.span + '<label class="file_box js_file_ajaxup"><label class="file_chose js_file_ajaxup_auto"><input type="text" class="input" autocomplete="off"><input type="button" class="file_browse" value="浏览"><input type="file" class="file" name="file" autocomplete="off"><input type="hidden" value="" class="file_hidden" autocomplete="off"></label><label class="file_up"><input type="submit" class="submit_file" value="上传"></label></label></p>';
		//         } else if (v.type == "file_ajaxload_auto") {
		//             html += '<p>' + v.span + '<label class="file_box js_file_ajaxup_auto"><label class="file_chose js_file_ajaxup_auto"><input type="text" class="input" autocomplete="off"><input type="button" class="file_browse" value="浏览"><input type="file" class="file" name="file" autocomplete="off"><input type="hidden" value="" class="file_hidden" autocomplete="off"></label><label class="file_up"></label></label></p>';
		//         }

		//     });

		//     html += '<p class="error_p"><span class="span"> </span><b></b></p>';
		//     if ($.isFunction(fun)) {
		//         alerts_form_FUN = fun;
		//         html += '<p class="submit_p"><span class="span"> </span><a href="javascript:void(0)" onClick="alerts_form_FUN()" class="btns btns_long btns-green">确 定</a> <a href="#" class="btns btns-gray2" value="">取 消</a></p>';
		//     } else {
		//         html += '<p class="submit_p"><span class="span"> </span><input type="submit" class="btns btns-green" value="确 定"> <a href="#" class="btns btns-gray2" value="">取 消</a></p>';
		//     }

		//     html += html_bottom;
		//     console.info(html);

		//     $.sx.dialog({
		//         opentitle: "新加员工",
		//         layerclass: obj[0].classname == undefined ? "alerts_form" : "alerts_form alerts_form_" + obj[0].classname,
		//         html: html
		//     });

		// },

		// /* alert */
		// alert: function(title, txt, type) {
		//     var html = '';
		//     html += '<div class="alert-type">';
		//     if (type == "info" || txt == "info") {
		//         html += '<span class="info"><i class="iconfont"></i></span>';
		//     } else if (type == "success" || txt == "success") {
		//         html += '<span class="success"><i class="iconfont"></i></span>';
		//     } else if (type == "error" || txt == "error") {
		//         html += '<span class="error"><i class="iconfont"></i></span>';
		//     } else if (type == "warning" || txt == "warning") {
		//         html += '<span class="warning"><i class="iconfont"></i></span>';
		//     }
		//     html += '</div>';
		//     if (txt != undefined) {
		//         if ((txt == "info" || txt == "success" || txt == "error" || txt == "warning")) {
		//             html += '<div class="alert-title alert-title-only">' + title + '</div>';
		//         } else {
		//             html += '<div class="alert-title">' + title + '</div>';
		//             html += '<div class="alert-info">' + txt + '</div>';
		//         }
		//     } else {
		//         html += '<div class="alert-title alert-title-only">' + title + '</div>';
		//     }
		//     html += '<div class="alert-btns"><a href="javascript:void(0)" class="btns btns-gray2" onClick="$.sx.dialogClosed(1)">确定</a></div>';
		//     $.sx.dialog({
		//         opentype: "alert",
		//         openAnimate: "slide",
		//         opentitle: false,
		//         layerclass: "alert",
		//         html: html
		//     });
		//     return false;
		// },
		// /* confirm */
		// confirm: function(title, txt, fun) {
		//     if ($.isFunction(txt)) {
		//         fun = txt;
		//         txt = undefined;
		//     }
		//     var html = '';
		//     if (txt != undefined) {
		//         if ((txt == "info" || txt == "success" || txt == "error" || txt == "warning")) {
		//             html += '<div class="alert-title alert-title-only">' + title + '</div>';
		//         } else {
		//             html += '<div class="alert-title">' + title + '</div>';
		//             html += '<div class="alert-info">' + txt + '</div>';
		//         }
		//     } else {
		//         html += '<div class="alert-title alert-title-only">' + title + '</div>';
		//     }
		//     html += '<div class="alert-btns"><a href="javascript:void(0)" class="btns btns-blue" id="js_confirm-fun">确定</a><a href="javascript:void(0)" class="btns btns-gray2" onClick="$.sx.dialogClosed(1)">取消</a></div>';
		//     $.sx.dialog({
		//         opentype: "alert",
		//         opentitle: false,
		//         openAnimate: "fade",
		//         layerclass: "alert",
		//         html: html
		//     });

		//     $("#js_confirm-fun").unbind('click').bind("click", function(e) {
		//         $.sx.dialogClosed(1);
		//         if ($.isFunction(fun)) {
		//             fun();
		//         }
		//         return false;
		//     });

		//     return false;
		// },
		// /* progress */
		// progress: function(title, txt) {
		//     var html = '';
		//     if (txt != undefined) {
		//         if ((txt == "info" || txt == "success" || txt == "error" || txt == "warning")) {
		//             html += '<div class="alert-title alert-title-only">' + title + '</div>';
		//         } else {
		//             html += '<div class="alert-title">' + title + '</div>';
		//             html += '<div class="alert-info">' + txt + '</div>';
		//         }
		//     } else {
		//         html += '<div class="alert-title alert-title-only">' + title + '</div>';
		//     }
		//     if ($.sx.browser.versions.webKit == true) {
		//         html += '<div class="alert-loading"><span></span><span></span><span></span><span></span><span></span></div>';
		//     } else {
		//         html += '<div class="alert-loading-img"><img width="140" height="28" src="' + imagePATH + '/dist/img/loading.gif"></div>';
		//     }
		//     $.sx.dialog({
		//         opentype: "alert",
		//         openAnimate: "fade",
		//         isShowClose: false,
		//         opentitle: false,
		//         layerclass: "alert",
		//         html: html
		//     });
		//     return false;
		// },
		// alertAutoClosed: function(title, type, fun) {
		//     var html = '';
		//     html += '<div class="alert-type">';
		//     if (type == "info") {
		//         html += '<span class="info"><i class="iconfont"></i></span>';
		//     } else if (type == "success") {
		//         html += '<span class="success"><i class="iconfont"></i></span>';
		//     } else if (type == "error") {
		//         html += '<span class="error"><i class="iconfont"></i></span>';
		//     } else if (type == "warning") {
		//         html += '<span class="warning"><i class="iconfont"></i></span>';
		//     }
		//     html += '</div>';
		//     html += '<div class="alert-title alert-title-only">' + title + '</div>';
		//     $.sx.dialog({
		//         opentype: "alert",
		//         openAnimate: "slide",
		//         opentitle: false,
		//         layerclass: "alert",
		//         html: html
		//     });

		//     if ($.isFunction(type)) fun = type;
		//     clearTimeout($.sx.dialogTIMELOCK);
		//     $.sx.dialogTIMELOCK = setTimeout(function() {
		//         $.sx.dialogClosed(1);
		//         if ($.isFunction(fun)) {
		//             fun();
		//         };
		//         $.sx.dialogTIMELOCK = null;
		//     }, $.sx.dialogTIME);
		//     return false;
		// },
		// dialogTIME: 2000,
		// dialogTIMELOCK: null,
		// dialogAJAXLOCK: null,


		space: function(a, b) {
			return a + b;
		}
	};

	//添加“静态方法”
	$.extend({

		abc: function() {
			return $(document).height();
		}

	});

	$.fn.extend({
		//插件名称 - paddingList
		paddingList: function(options) {

			//参数和默认值
			var defaults = {
				animatePadding: 10,
				hoverColor: "Black"
			};

			var options = $.extend(defaults, options);

			return this.each(function() {
				var o = options;

				//将元素集合赋给变量 本例中是 ul对象
				var obj = $(this);

				//得到ul中的a对象
				var items = $("li a", obj);

				//添加hover()事件到a
				items.hover(function() {
					$(this).css("color", o.hoverColor);
					//queue false表示不添加到动画队列中
					$(this).animate({ paddingLeft: o.animatePadding }, { queue: false, duration: 300 });

				}, function() {
					$(this).css("color", "");
					$(this).animate({ paddingLeft: "0" }, { queue: true, duration: 300 });
				});

			});
		},


		//     //全选或全不选
		//     $("#all").click(function(){
		//         if(this.checked){
		//             $("#list :checkbox").attr("checked", true);
		//         }else{
		//             $("#list :checkbox").attr("checked", false);
		//         }
		//      });
		//     //全选
		//     $("#selectAll").click(function () {
		//          $("#list :checkbox,#all").attr("checked", true);
		//     });
		//     //全不选
		//     $("#unSelect").click(function () {
		//          $("#list :checkbox,#all").attr("checked", false);
		//     });
		//     //反选
		//     $("#reverse").click(function () {
		//          $("#list :checkbox").each(function () {
		//               $(this).attr("checked", !$(this).attr("checked"));
		//          });
		//          allchk();
		//     });

		//     //设置全选复选框
		//     $("#list :checkbox").click(function(){
		//         allchk();
		//     });

		//     //获取选中选项的值
		//     $("#getValue").click(function(){
		//         var valArr = new Array;
		//         $("#list :checkbox[checked]").each(function(i){
		//             valArr[i] = $(this).val();
		//         });
		//         var vals = valArr.join(',');
		//           alert(vals);
		//     });
		// });

		//全选全不选
		checkboxAll: function(checkboxs) {
			$(this).click(function(e) {
				if (this.checked) {
					checkboxs.prop("checked", true);
				} else {
					checkboxs.prop("checked", false);
				}
			});
		},

		//获得当前元素位于document文档树的位置
		documentOffset: function() {
			var obj = $(this);
			var newObject = new Object();
			newObject.top = obj.offset().top;
			newObject.bottom = $.sx.documentHeight() - newObject.top - obj.height();
			newObject.left = obj.offset().left;
			return newObject;
		},

		//获得当前元素位于window窗口的位置
		windowOffset: function() {
			var obj = $(this);
			if (obj) {
				var offset = obj.offset();
				var newObject = new Object();
				newObject.top = obj.offset().top - (document.documentElement.scrollTop + document.body.scrollTop);
				newObject.bottom = $.sx.windowHeight() - newObject.top;
				newObject.left = ($.sx.windowWidth() - (obj.width() + parseInt(obj.css("padding-left")) + parseInt(obj.css("padding-right")))) / 2;
			} else {
				newObject.top = 0;
				newObject.bottom = 0;
				newObject.left = 0;
			};
			//left = ($(window).width() - (dialog_mask.width()+parseInt(dialog_mask.css("padding-left"))+parseInt(dialog_mask.css("padding-right")))) / 2,
			return newObject;
		},

		// placeholder
		placeholder: function(option, callback) {
			var settings = $.extend({
				word: '',
				color: '#999',
				evtType: 'focus',
				zIndex: 20,
				diffPaddingLeft: 3
			}, option)

			function bootstrap($that) {
				// some alias
				var word    = settings.word
				var color   = settings.color
				var evtType = settings.evtType
				var zIndex  = settings.zIndex
				var diffPaddingLeft = settings.diffPaddingLeft

				// default css
				var width       = $that.outerWidth()
				var height      = $that.outerHeight()
				var fontSize    = $that.css('font-size')
				var fontFamily  = $that.css('font-family')
				var paddingLeft = $that.css('padding-left')

				// process
				paddingLeft = parseInt(paddingLeft, 10) + diffPaddingLeft

				// redner
				var $placeholder = $('<span class="placeholder"></span>')
				$placeholder.css({
					position: 'absolute',
					zIndex: '20',
					color: color,
					width: (width - paddingLeft) + 'px',
					height: height + 'px',
					fontSize: fontSize,
					paddingLeft: paddingLeft + 'px',
					fontFamily: fontFamily
				}).text(word).hide()

				// 位置调整
				move()

				// textarea 不加line-heihgt属性
				if ($that.is('input')) {
					$placeholder.css({
						lineHeight: height + 'px'
					})
				}
				$placeholder.appendTo(document.body)

				// 内容为空时才显示，比如刷新页面输入域已经填入了内容时
				var val = $that.val()
				if ( val == '' && $that.is(':visible') ) {
					$placeholder.show()
				}

				function hideAndFocus() {
					$placeholder.hide()
					$that[0].focus()
				}
				function move() {
					var offset = $that.offset()
					var top    = offset.top
					var left   = offset.left
					$placeholder.css({
						top: top,
						left: left
					})
				}
				function asFocus() {
					$placeholder.click(function() {
						hideAndFocus()
						// 盖住后无法触发input的click事件，需要模拟点击下
						setTimeout(function(){
							$that.click()
						}, 100)
					})
					// IE有些bug，原本不用加此句
					$that.click(hideAndFocus)
					$that.blur(function() {
						var txt = $that.val()
						if (txt == '') {
							$placeholder.show()
						}
					})
				}
				function asKeydown() {
					$placeholder.click(function() {
						$that[0].focus()
					})
				}

				if (evtType == 'focus') {
					asFocus()
				} else if (evtType == 'keydown') {
					asKeydown()
				}

				$that.keyup(function() {
					var txt = $that.val()
					if (txt == '') {
						$placeholder.show()
					} else {
						$placeholder.hide()
					}
				})

				// 窗口缩放时处理
				$(window).resize(function() {
					move()
				})

				// cache
				$that.data('el', $placeholder)
				$that.data('move', move)

			}

			return this.each(function() {
				var $elem = $(this)
				bootstrap($elem)
				if ($.isFunction(callback)) callback($elem)
			})
		},


		abc: function(){
			// test
		}

	});
})(jQuery);




/*
 Date.prototype.Format = function (fmt) { //author: meizz
 var o = {
 "M+": this.getMonth() + 1, //月份
 "d+": this.getDate(), //日
 "H+": this.getHours(), //小时
 "m+": this.getMinutes(), //分
 "s+": this.getSeconds(), //秒
 "q+": Math.floor((this.getMonth() + 3) / 3), //季度
 "S": this.getMilliseconds() //毫秒
 };
 if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
 for (var k in o)
 if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
 return fmt;
 }

 */
